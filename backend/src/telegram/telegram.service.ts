import { Injectable, OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import * as TelegramBot from 'node-telegram-bot-api';
import { PrismaService } from '../prisma/prisma.service';

@Injectable()
export class TelegramService implements OnModuleInit {
  private bot: TelegramBot;
  private userMapping: Map<number, string> = new Map(); // chatId -> userId

  constructor(
    private configService: ConfigService,
    private prisma: PrismaService,
  ) { }

  onModuleInit() {
    const token = this.configService.get<string>('TELEGRAM_BOT_TOKEN');
    if (!token) {
      console.warn('No Telegram bot token provided. Bot is disabled.');
      return;
    }

    this.bot = new TelegramBot(token, { polling: true });
    this.setupCommands();
  }

  private async checkGeofences(userId: string, latitude: number, longitude: number) {
    // Obtener todos los geofences activos del usuario
    const geofences = await this.prisma.geofence.findMany({
      where: { userId, isActive: true }
    });

    for (const geofence of geofences) {
      // Calcular distancia entre la ubicaci√≥n y el centro del geofence
      const distance = this.calculateDistance(
        latitude, longitude,
        Number(geofence.centerLatitude), Number(geofence.centerLongitude)
      );

      // Si la distancia es menor que el radio, el usuario est√° dentro del geofence
      const isInside = distance <= Number(geofence.radiusMeters);

      // Aqu√≠ podr√≠as implementar l√≥gica para detectar entrada/salida
      // comparando con el estado anterior y enviar notificaciones
      console.log(`Usuario ${userId} ${isInside ? 'dentro' : 'fuera'} de geofence ${geofence.name}`);
    }
  }

  private calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {
    // Implementar c√°lculo de distancia usando la f√≥rmula de Haversine
    const R = 6371e3; // Radio de la Tierra en metros
    const œÜ1 = lat1 * Math.PI / 180;
    const œÜ2 = lat2 * Math.PI / 180;
    const ŒîœÜ = (lat2 - lat1) * Math.PI / 180;
    const ŒîŒª = (lon2 - lon1) * Math.PI / 180;

    const a = Math.sin(ŒîœÜ / 2) * Math.sin(ŒîœÜ / 2) +
      Math.cos(œÜ1) * Math.cos(œÜ2) *
      Math.sin(ŒîŒª / 2) * Math.sin(ŒîŒª / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

    return R * c; // Distancia en metros
  }

  private setupCommands() {
    // Comando /start
    this.bot.onText(/\/start/, (msg) => {
      const chatId = msg.chat.id;
      this.bot.sendMessage(chatId,
        'üëã Bienvenido al servicio de rastreo.\n\n' +
        'Para registrar tu n√∫mero usa:\n' +
        '/register [tu_numero_telefono]\n\n' +
        'Para ver todos los comandos disponibles usa:\n' +
        '/help'
      );
    });

    // Comando /help
    this.bot.onText(/\/help/, (msg) => {
      const chatId = msg.chat.id;
      this.bot.sendMessage(chatId,
        'üìã Comandos disponibles:\n\n' +
        '/register [numero] - Registrar tel√©fono\n' +
        '/location - Compartir ubicaci√≥n actual\n' +
        '/last - Ver tu √∫ltima ubicaci√≥n\n' +
        '/history [n] - Ver √∫ltimas n ubicaciones\n' +
        '/geofence create [nombre] [radio] - Crear nuevo geofence\n' +
        '/geofence list - Listar todos tus geofences\n' +
        '/geofence delete [id] - Eliminar un geofence\n' +
        '/settings - Configurar preferencias\n' +
        '/help - Ver esta ayuda'
      );
    });

    // Comando /register
    this.bot.onText(/\/register (.+)/, async (msg, match) => {
      const chatId = msg.chat.id;
      const phoneNumber = match[1];

      try {
        const user = await this.prisma.user.findUnique({
          where: { phoneNumber },
        });

        if (user) {
          this.userMapping.set(chatId, user.id);
          this.bot.sendMessage(chatId, `‚úÖ Registrado con √©xito como ${user.name}.\n\nPuedes compartir tu ubicaci√≥n usando /location`);
        } else {
          this.bot.sendMessage(chatId, `‚ùå No se encontr√≥ ning√∫n usuario con el n√∫mero ${phoneNumber}.\n\nPrimero debes registrarte en la aplicaci√≥n.`);
        }
      } catch (error) {
        console.error('Error en registro Telegram:', error);
        this.bot.sendMessage(chatId, '‚ùå Error al procesar el registro');
      }
    });

    // Comando /location
    this.bot.onText(/\/location/, (msg) => {
      const chatId = msg.chat.id;

      if (!this.userMapping.has(chatId)) {
        return this.bot.sendMessage(chatId, '‚ö†Ô∏è Primero debes registrar tu n√∫mero con /register');
      }

      this.bot.sendMessage(chatId, 'üìç Comparte tu ubicaci√≥n:', {
        reply_markup: {
          keyboard: [
            [{ text: 'Compartir ubicaci√≥n actual üìç', request_location: true }]
          ],
          resize_keyboard: true,
          one_time_keyboard: true
        }
      });
    });

    // Recibir ubicaci√≥n
    this.bot.on('location', async (msg) => {
      const chatId = msg.chat.id;
      const userId = this.userMapping.get(chatId);

      if (!userId) {
        return this.bot.sendMessage(chatId, '‚ö†Ô∏è Primero debes registrar tu n√∫mero con /register');
      }

      const { latitude, longitude } = msg.location;

      try {
        await this.prisma.location.create({
          data: {
            userId,
            latitude,
            longitude,
            accuracy: 0,
            deviceInfo: 'Telegram Bot',
          },
        });

        // Verificar si cruza alg√∫n geofence
        await this.checkGeofences(userId, latitude, longitude);

        this.bot.sendMessage(chatId, '‚úÖ ¬°Ubicaci√≥n recibida y guardada!');
      } catch (error) {
        console.error(error);
        this.bot.sendMessage(chatId, '‚ùå Error al guardar ubicaci√≥n');
      }
    });

    // Comando /last
    this.bot.onText(/\/last/, async (msg) => {
      const chatId = msg.chat.id;
      const userId = this.userMapping.get(chatId);

      if (!userId) {
        return this.bot.sendMessage(chatId, '‚ö†Ô∏è Primero debes registrar tu n√∫mero con /register');
      }

      try {
        const lastLocation = await this.prisma.location.findFirst({
          where: { userId },
          orderBy: { createdAt: 'desc' }
        });

        if (!lastLocation) {
          return this.bot.sendMessage(chatId, 'No se encontraron ubicaciones registradas');
        }

        // Enviar √∫ltima ubicaci√≥n como mensaje y luego como ubicaci√≥n en el mapa
        const dateStr = new Date(lastLocation.createdAt).toLocaleString();
        await this.bot.sendMessage(chatId,
          `üìç √öltima ubicaci√≥n (${dateStr}):\n` +
          `Latitud: ${lastLocation.latitude}\n` +
          `Longitud: ${lastLocation.longitude}`
        );

        // Enviar ubicaci√≥n como punto en el mapa
        await this.bot.sendLocation(
          chatId,
          Number(lastLocation.latitude),
          Number(lastLocation.longitude)
        );

      } catch (error) {
        console.error(error);
        this.bot.sendMessage(chatId, '‚ùå Error al consultar ubicaci√≥n');
      }
    });

    // Implementar resto de comandos aqu√≠...
  }
}
